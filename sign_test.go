package mar

import (
	"crypto"
	"crypto/ecdsa"
	"crypto/elliptic"
	"crypto/rand"
	"crypto/rsa"
	"fmt"
	"io/ioutil"
	"log"
	"math/big"
	"os"
	"testing"
)

func TestMain(m *testing.M) {
	rsa2048Key.Precompute()
	os.Exit(m.Run())
}

func TestSignRSASHA384(t *testing.T) {
	testSign(t, rsa4096Key, rsa4096Key.Public(), SigAlgRsaPkcs1Sha384)
}

func TestSignRSASHA1(t *testing.T) {
	testSign(t, rsa2048Key, rsa2048Key.Public(), SigAlgRsaPkcs1Sha1)
}

func TestSignRSASHA1PrivateLargerThanPublic(t *testing.T) {
	testSign(t, rsa4096Key, rsa2048Key.Public(), SigAlgRsaPkcs1Sha1)
}

func TestSignRSASHA1PrivateSmallerThanPublic(t *testing.T) {
	testSign(t, rsa2048Key, rsa4096Key.Public(), SigAlgRsaPkcs1Sha384)
}

func TestSignECDSAP256(t *testing.T) {
	ecdsaPrivKey, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)
	if err != nil {
		log.Fatalf("ecdsa key generation failed with: %v", err)
	}
	testSign(t, ecdsaPrivKey, ecdsaPrivKey.Public(), SigAlgEcdsaP256Sha256)
}

func TestSignECDSAP384(t *testing.T) {
	ecdsaPrivKey, err := ecdsa.GenerateKey(elliptic.P384(), rand.Reader)
	if err != nil {
		log.Fatalf("ecdsa key generation failed with: %v", err)
	}
	testSign(t, ecdsaPrivKey, ecdsaPrivKey.Public(), SigAlgEcdsaP384Sha384)
}

func testSign(t *testing.T, key crypto.PrivateKey, pub crypto.PublicKey, alg uint32) {
	signableMar := New()
	signableMar.AddContent([]byte("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"), "/foo/bar", 0600)
	err := signableMar.PrepareSignature(key, pub)
	if err != nil {
		t.Fatal(err)
	}
	// override the signature algorithm
	signableMar.Signatures[0].AlgorithmID = alg
	err = signableMar.FinalizeSignatures()
	if err != nil {
		t.Fatal(err)
	}
	outputMar, err := signableMar.Marshal()
	if err != nil {
		t.Fatalf("mar marshalling failed with error: %v", err)
	}
	ioutil.WriteFile(fmt.Sprintf("/tmp/%d.mar", alg), outputMar, 0640)
	// reparse the MAR to make sure it goes through fine
	var reparsedMar File
	err = Unmarshal(outputMar, &reparsedMar)
	if err != nil {
		t.Fatalf("mar unmarshalling failed with error: %v", err)
	}
	err = reparsedMar.VerifySignature(pub)
	if err != nil {
		t.Fatal(err)
	}
}

var (
	// this is a valid 2047 bits RSA just to mess with signature size rounding
	rsa2048Key = &rsa.PrivateKey{
		PublicKey: rsa.PublicKey{
			N: fromBase10("14314132931241006650998084889274020608918049032671858325988396851334124245188214251956198731333464217832226406088020736932173064754214329009979944037640912127943488972644697423190955557435910767690712778463524983667852819010259499695177313115447116110358524558307947613422897787329221478860907963827160223559690523660574329011927531289655711860504630573766609239332569210831325633840174683944553667352219670930408593321661375473885147973879086994006440025257225431977751512374815915392249179976902953721486040787792801849818254465486633791826766873076617116727073077821584676715609985777563958286637185868165868520557"),
			E: 3,
		},
		D: fromBase10("9542755287494004433998723259516013739278699355114572217325597900889416163458809501304132487555642811888150937392013824621448709836142886006653296025093941418628992648429798282127303704957273845127141852309016655778568546006839666463451542076964744073572349705538631742281931858219480985907271975884773482372966847639853897890615456605598071088189838676728836833012254065983259638538107719766738032720239892094196108713378822882383694456030043492571063441943847195939549773271694647657549658603365629458610273821292232646334717612674519997533901052790334279661754176490593041941863932308687197618671528035670452762731"),
		Primes: []*big.Int{
			fromBase10("130903255182996722426771613606077755295583329135067340152947172868415809027537376306193179624298874215608270802054347609836776473930072411958753044562214537013874103802006369634761074377213995983876788718033850153719421695468704276694983032644416930879093914927146648402139231293035971427838068945045019075433"),
			fromBase10("109348945610485453577574767652527472924289229538286649661240938988020367005475727988253438647560958573506159449538793540472829815903949343191091817779240101054552748665267574271163617694640513549693841337820602726596756351006149518830932261246698766355347898158548465400674856021497190430791824869615170301029"),
		},
	}
	// this is a valid 4096-bit RSA key
	rsa4096Key = &rsa.PrivateKey{
                PublicKey: rsa.PublicKey{
                        N: fromBase10("782820319521677948247850792912150637051367208080461674276903684181963133806719603368356224464366145263822552301581108451954535131247458366711370806445032725135124366647072631463620812985791559166012471610823966936628849452092482820944209901634138799001194297258364639206575474642373534993889872423259208189888872125293052488957743682576398403755615002999796461863609574641811741298099584887496840314381116883887807039092043565273219296162632091626493421512847125494160370664437753130465514734941320528734230961333416251456047393721490712377708526115213094606598777824633254348993640134144516340952505850437882215608949916145620815669927345892985868416025086239230949221517053992518631801416008102860565580973484088537648025572838889080001896503037489661999007474656593806853525005836447513606874086657283137170117146379449924999601168633394853772748354822929081022343196767464913777029516456026378498991391997576692200637576574200847368741800881355919947929380767598110467645094715268217370368678308020424495991738463933299975061400364900576864794050804109049406790328058508450528507999275625288914447437719854670154406045146373117410349315575929286949047431528152234021079757571090322802164269327378804983834761177134283968790630079"),
                        E: 65537,
                },
                D: fromBase10("550244912630813378152577851080933384903310829110800730690142135214097589482892797179710664756938688797522768731016606526812908972886238569371896906628269184065102752246273827624138370248920059882837641595193812058878871154616358906108243790968128506260418030997815363377788208414721138639677294704515902230425878256919751529003882089225389762537286734641326637047912456558122887447369508482649945006977440688056757542499871505834507531578006468603476600323646423898164268047484467334605252022213511016321636380438304363025074068681419521131445152570660945971704217453797938490329753061926870161318310793998374691307800148001271023261031153699971101458058130499628233839728193673366803027926789404064252184498058983392199004164886061182712466767168477145160690617584036658549634676696730836841945735328366347424585110753665010472192277029459576096865530673815601170573003417281985599384548456308630728747234663656546174784567680347695085400118377277812709465690012139717196269778057680944241554600739375373455179303016296971184486600182361404383237863192421143895823211332555542920230941880737797461723271688504826876612116228548943659167740153358800966317215185680900413536831678438630191362496491792399715061921776746259373230497841"),
                Primes: []*big.Int{
                        fromBase10("30657807027095696852698475955504195070289912328402561058322672831648584754522241489205904083642388527756772891509609245710189381032862014214796086560913455875518550798556184055301357500845423506302144001454696003549500560366517281520586872225181073561468114343903765957791404340003397771669841020989816411665565827028629053585260843032386956653425992839439004227616139479441757310564672334716136953785320080163101000549435294779740155237510769552925012404805759834798497905619731565419969375100977219650372068072880186933457414285887469444123932679039470714156016220989544506199785327108552849714246745710723558082237"),
                        fromBase10("25534126391682647103242909692933659222592563733711485833918469180315174260626286540488852085228935832959325968479503606022985407075602191647447158412073992896831449466023816546089343227224295716412701256496861624973969560466094519702645652916962643266968852868991380696499241303473784198328544085354043652468294290831442942946700014992984924168180280201652269303590983119842414088434173343760402564347369903689056342242604183681366580843338076938470755650626829616924557202117895467184936832368401417963933807028320395584568567785114867752238876158099460669006718985329722484103220196130501101550045861598892273594667"),
                },
        }
)


func fromBase10(base10 string) *big.Int {
	i, ok := new(big.Int).SetString(base10, 10)
	if !ok {
		panic("bad number: " + base10)
	}
	return i
}
